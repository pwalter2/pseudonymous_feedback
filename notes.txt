Goals:
   No sock puppets. User account is unique and pseudonymous.
   1 user account per employee.

   Could be an interesting web service to offer to companies.


Defend against:
    non-consensual identification of feedback user
    prevent employee X from posing / posting as employee Y
    

Things that are close but imperfect:
   1. Google forms with "no collect email" and "limited to 1 response"
    deleting a response allows responder to submit a new one.
   Missing features:
      boss cannot respond to a given response.
      still vulnerable to sock puppet attack if responses are deleted (allowing user to submit more)


   2. Very sparse allocation of 100 unique user ID's. Print off user ID's. Mix into a bowl. 
      Allow employee to pull exactly 1 ID from bowl. ID is a key that unlocks account generation 
      that can be triggered exactly once at anytime in the future. 
      Keep track of birthday problem for possible collisions of unique ID's. Make guessing a unique ID 
      extremely difficult. Keep bowl relatively full of unique user ID's.

      Only relatively pseudonymous because boss controls bowl and keep track of which unique ID's have 
      been allocated from bowl. Boss can also track changes of state in bowl to know which ID's have 
      been allocatted. 

      Maybe lock the bowl so that only one ID can be pulled out, and no ID's can be put back in.
      This would prevent Boss from probing the state of the allocated ID's.

      I think this can be translated into software by encrypting the bowl and throwing away the key.
      ^^ definitely onto something here and does not require a third party. 
      Encryption key can be generated automatically such that resource is locked forever and no one can 
      open it. Hehe, I like this one very much.

      but how have encrypted resource that allows 1 key out per request? And how prevent one person from 
      taking out multiple keys. Ugh, this actually does not work. 

      Other issues: if all employeees are eager feedback. Then revealing identity of a keyholder becomes 
      much easier. Example: 4 existing employees, 4 feedback accounts granted, any new accounts are therefore 
      definitely not one of the 4 existing employees. This is what makes me think that a trusted third party is 
      necessary. An identity escrow service. 

   3. Identity escrow service
      Trusted third party keeps the mapping between 


Other fundamental issues...
    because feedback from given user is tracked. Anytime feedback is given; fundamentally, it will 
    become known that the user is one of the existing employees and not one of the future employees. 
    Therefore, even with perfect implementation, in worst case, user gives immediate feedback after 
    account granted -> identity reveal because submission of feedback implies user is one of existing 
    employees. 

    workaround. Only grant accounts in blocks of size >1
    block size | worst-case identity reveal accuracy
    1 | 100%
    2 | 50%

    worst-case identity reveal accuracy = 1 / n

Things that will not work:
   1. Allocate a fixed number of hashed identifiers. 
   Boss distributes hashed identifier to new employees. 
   Because Boss knows state of identifier list, employees not pseudo.

   2. Employee picks or otherwise generates their own user identifier. 
   Then, they can generate a new identifier for sock puppet attack.

   3. Feedback box that is not monitored. Submissions are then anonymous and 
    employees can sock puppet.

   4. do whatever blockchain does for identity. Will not work because blockchain 
   identity not unique. Sock puppet attack.

   


Ideas:
    need a 3rd party?
    how does blockchain do identity?
    blockchain not relevant 
    zero knowledge proof
       employee must prove that has zero or one pseudo identities. 
      preferably without revealing their own identity, but that may not be possible.

    trusted third party is Google and google forms and google account
    need to have a trusted third party because fundamentally employee must reveal
